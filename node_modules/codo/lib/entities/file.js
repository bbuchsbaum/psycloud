// Generated by CoffeeScript 1.6.3
(function() {
  var Class, Entities, MetaMethod, Method, Mixin, Path, Variable,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Path = require('path');

  Method = require('./method');

  Variable = require('./variable');

  Mixin = require('./mixin');

  Class = require('./class');

  MetaMethod = require('../meta/method');

  Entities = require('../_entities');

  module.exports = Entities.File = (function(_super) {
    __extends(File, _super);

    function File(environment, path, node) {
      this.environment = environment;
      this.path = path;
      this.node = node;
      this.file = this;
      this.name = Path.relative(this.environment.options.basedir, this.path);
      this.basename = Path.basename(this.name);
      this.dirname = Path.dirname(this.name);
      this.methods = [];
      this.variables = [];
      this.mixins = [];
      this.classes = [];
    }

    File.prototype.linkify = function() {
      var entities, entity, node, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _results;
      File.__super__.linkify.apply(this, arguments);
      _ref = this.node.expressions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        if (!(entities = node.entities)) {
          if (((_ref1 = node.variable) != null ? (_ref2 = _ref1.base) != null ? _ref2.value : void 0 : void 0) === 'module') {
            if (((_ref3 = node.variable) != null ? (_ref4 = _ref3.properties) != null ? (_ref5 = _ref4[0]) != null ? (_ref6 = _ref5.name) != null ? _ref6.value : void 0 : void 0 : void 0 : void 0) === 'exports') {
              entities = (_ref7 = node.value) != null ? _ref7.entities : void 0;
            }
          }
        }
        if (entities) {
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = entities.length; _j < _len1; _j++) {
              entity = entities[_j];
              if (entity instanceof Method) {
                if (entity.name.length > 0) {
                  this.methods.push(entity);
                }
              }
              if (entity instanceof Variable) {
                this.variables.push(entity);
              }
              if (entity instanceof Mixin) {
                this.mixins.push(entity);
              }
              if (entity instanceof Class) {
                _results1.push(this.classes.push(entity));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    File.prototype.effectiveMethods = function() {
      return this._effectiveMethods || (this._effectiveMethods = this.methods.map(function(method) {
        return MetaMethod.fromMethodEntity(method);
      }));
    };

    File.prototype.inspect = function() {
      return {
        file: this.name,
        methods: this.methods.map(function(x) {
          return x.inspect();
        }),
        variables: this.variables.map(function(x) {
          return x.inspect();
        })
      };
    };

    return File;

  })(require('../entity'));

}).call(this);
