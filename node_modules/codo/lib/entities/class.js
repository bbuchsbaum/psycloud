// Generated by CoffeeScript 1.6.3
(function() {
  var Entities, MetaMethod, Method, Mixin, Property, Variable,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Method = require('./method');

  Variable = require('./variable');

  Property = require('./property');

  Mixin = require('./mixin');

  MetaMethod = require('../meta/method');

  Entities = require('../_entities');

  module.exports = Entities.Class = (function(_super) {
    __extends(Class, _super);

    Class.looksLike = function(node) {
      var _ref, _ref1;
      return node.constructor.name === 'Class' && (((_ref = node.variable) != null ? (_ref1 = _ref.base) != null ? _ref1.value : void 0 : void 0) != null);
    };

    function Class(environment, file, node) {
      var name, _ref;
      this.environment = environment;
      this.file = file;
      this.node = node;
      _ref = this.determineContainment(this.node.variable), this.selfish = _ref[0], this.container = _ref[1];
      if (this.node.parent) {
        this.parent = this.fetchParent(this.node.parent);
      }
      this.documentation = this.node.documentation;
      this.name = this.fetchName(this.node.variable, this.selfish, this.container);
      this.methods = [];
      this.variables = [];
      this.properties = [];
      this.includes = [];
      this["extends"] = [];
      this.concerns = [];
      this.descendants = [];
      name = this.name.split('.');
      this.basename = name.pop();
      this.namespace = name.join('.');
      this;
    }

    Class.prototype.determineContainment = function(node) {
      var container, selfish, _ref;
      if (((_ref = node.base) != null ? _ref.value : void 0) === 'this') {
        selfish = true;
        container = this.lookup(Class, node);
      }
      return [selfish, container];
    };

    Class.prototype.fetchParent = function(source) {
      var container, selfish, _ref;
      _ref = this.determineContainment(source), selfish = _ref[0], container = _ref[1];
      return this.fetchName(source, selfish, container);
    };

    Class.prototype.fetchName = function(source, selfish, container) {
      var name, prop, _i, _len, _ref;
      name = [];
      if (container) {
        name.push(container.name);
      }
      if (!selfish && (source.base != null)) {
        name.push(source.base.value);
      }
      if (source.properties) {
        _ref = source.properties;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          prop = _ref[_i];
          if (prop.name != null) {
            name.push(prop.name.value);
          }
        }
      }
      return name.join('.');
    };

    Class.prototype.linkify = function() {
      var node, _i, _len, _ref;
      Class.__super__.linkify.apply(this, arguments);
      _ref = this.node.body.expressions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        if (node.constructor.name === 'Assign' && (node.entities != null)) {
          this.linkifyAssign(node);
        }
        if (node.constructor.name === 'Value') {
          this.linkifyValue(node);
        }
        if (node.constructor.name === 'Call' && (node.entities != null)) {
          this.linkifyCall(node);
        }
      }
      this.linkifyParent();
      return this.linkifyMixins();
    };

    Class.prototype.linkifyAssign = function(node) {
      var entity, _i, _len, _ref, _results;
      _ref = node.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (!entity.selfish) {
          continue;
        }
        if (entity instanceof Method) {
          entity.kind = 'static';
          this.methods.push(entity);
        }
        if (entity instanceof Variable) {
          entity.kind = 'static';
          _results.push(this.variables.push(entity));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Class.prototype.linkifyValue = function(node) {
      var entity, property, _i, _len, _ref, _results;
      _ref = node.base.properties;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        property = _ref[_i];
        if (property.entities != null) {
          _results.push((function() {
            var _j, _len1, _ref1, _results1;
            _ref1 = property.entities;
            _results1 = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              entity = _ref1[_j];
              if (entity instanceof Method) {
                entity.kind = entity.selfish ? 'static' : 'dynamic';
                this.methods.push(entity);
              }
              if (entity instanceof Variable) {
                entity.kind = entity.selfish ? 'static' : 'dynamic';
                this.variables.push(entity);
              }
              if (entity instanceof Property) {
                _results1.push(this.properties.push(entity));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        }
      }
      return _results;
    };

    Class.prototype.linkifyCall = function(node) {
      var entity, found, property, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = node.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (entity instanceof Property) {
          found = false;
          _ref1 = this.properties;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            property = _ref1[_j];
            if (property.name === entity.name) {
              entity.unite(property);
              found = true;
            }
          }
          if (!found) {
            _results.push(this.properties.push(entity));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Class.prototype.linkifyParent = function() {
      var _ref;
      if (this.parent) {
        this.parent = this.environment.find(Class, this.parent) || this.parent;
        return (_ref = this.parent.descendants) != null ? _ref.push(this) : void 0;
      }
    };

    Class.prototype.linkifyMixins = function() {
      var entry, mixin, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _results;
      if (((_ref = this.documentation) != null ? _ref.includes : void 0) != null) {
        _ref1 = this.documentation.includes;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          entry = _ref1[_i];
          mixin = this.environment.find(Mixin, entry) || entry;
          this.includes.push(mixin);
          if ((_ref2 = mixin.inclusions) != null) {
            _ref2.push(this);
          }
        }
      }
      if (((_ref3 = this.documentation) != null ? _ref3["extends"] : void 0) != null) {
        _ref4 = this.documentation["extends"];
        for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
          entry = _ref4[_j];
          mixin = this.environment.find(Mixin, entry) || entry;
          this["extends"].push(mixin);
          if ((_ref5 = mixin.extensions) != null) {
            _ref5.push(this);
          }
        }
      }
      if (((_ref6 = this.documentation) != null ? _ref6.concerns : void 0) != null) {
        _ref7 = this.documentation.concerns;
        _results = [];
        for (_k = 0, _len2 = _ref7.length; _k < _len2; _k++) {
          entry = _ref7[_k];
          mixin = this.environment.find(Mixin, entry) || entry;
          this.concerns.push(mixin);
          _results.push((_ref8 = mixin.concerns) != null ? _ref8.push(this) : void 0);
        }
        return _results;
      }
    };

    Class.prototype.effectiveMethods = function() {
      var method, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      if (this._effectiveMethods != null) {
        return this._effectiveMethods;
      }
      this._effectiveMethods = [];
      _ref = this.methods;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        method = _ref[_i];
        this._effectiveMethods.push(MetaMethod.fromMethodEntity(method));
      }
      if ((_ref1 = this.documentation) != null ? _ref1.methods : void 0) {
        _ref2 = this.documentation.methods;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          method = _ref2[_j];
          this._effectiveMethods.push(MetaMethod.fromDocumentationMethod(method));
        }
      }
      return this._effectiveMethods;
    };

    Class.prototype.allMethods = function() {
      var method, methods, mixin, resolver, resolvers, storage, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      methods = this.effectiveMethods().map(function(method) {
        return {
          entity: method,
          owner: _this
        };
      });
      resolvers = {
        includes: 'effectiveInclusionMethods',
        "extends": 'effectiveExtensionMethods',
        concerns: 'effectiveConcernMethods'
      };
      for (storage in resolvers) {
        resolver = resolvers[storage];
        _ref = this[storage];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mixin = _ref[_i];
          _ref1 = mixin[resolver]();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            method = _ref1[_j];
            methods.push({
              entity: method,
              owner: mixin
            });
          }
        }
      }
      return methods;
    };

    Class.prototype.inherited = function(getter) {
      var entries, found;
      if (!this.parent || (this.parent.name == null)) {
        return [];
      }
      found = {};
      entries = getter();
      return entries.filter(function(entry) {
        if (!found[entry.entity.name]) {
          return found[entry.entity.name] = true;
        }
      });
    };

    Class.prototype.inheritedMethods = function() {
      var _this = this;
      return this._inheritedMethods || (this._inheritedMethods = this.inherited(function() {
        return _this.parent.allMethods().concat(_this.parent.inheritedMethods());
      }));
    };

    Class.prototype.inheritedVariables = function() {
      var _this = this;
      return this._inheritedVariables || (this._inheritedVariables = this.inherited(function() {
        var variables;
        variables = _this.parent.variables.map(function(variable) {
          return {
            entity: variable,
            owner: _this.parent
          };
        });
        return variables.concat(_this.parent.inheritedVariables());
      }));
    };

    Class.prototype.inheritedProperties = function() {
      var _this = this;
      return this._inheritedProperties || (this._inheritedProperties = this.inherited(function() {
        var properties;
        properties = _this.parent.properties.map(function(property) {
          return {
            entity: property,
            owner: _this.parent
          };
        });
        return properties.concat(_this.parent.inheritedProperties());
      }));
    };

    Class.prototype.inspect = function() {
      var _ref, _ref1, _ref2;
      return {
        file: this.file.path,
        documentation: (_ref = this.documentation) != null ? _ref.inspect() : void 0,
        selfish: this.selfish,
        name: this.name,
        container: (_ref1 = this.container) != null ? _ref1.inspect() : void 0,
        parent: ((_ref2 = this.parent) != null ? typeof _ref2.inspect === "function" ? _ref2.inspect() : void 0 : void 0) || this.parent,
        methods: this.methods.map(function(x) {
          return x.inspect();
        }),
        variables: this.variables.map(function(x) {
          return x.inspect();
        }),
        properties: this.properties.map(function(x) {
          return x.inspect();
        }),
        includes: this.includes.map(function(x) {
          return (typeof x.inspect === "function" ? x.inspect() : void 0) || x;
        }),
        "extends": this["extends"].map(function(x) {
          return (typeof x.inspect === "function" ? x.inspect() : void 0) || x;
        }),
        concerns: this.concerns.map(function(x) {
          return (typeof x.inspect === "function" ? x.inspect() : void 0) || x;
        })
      };
    };

    return Class;

  })(require('../entity'));

}).call(this);
