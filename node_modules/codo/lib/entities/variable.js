// Generated by CoffeeScript 1.6.3
(function() {
  var Entities, Entity,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Entity = require('../entity');

  Entities = require('../_entities');

  module.exports = Entities.Variable = (function(_super) {
    __extends(Variable, _super);

    Variable.looksLike = function(node) {
      var _ref, _ref1, _ref2;
      return node.constructor.name === 'Assign' && ((_ref = node.value) != null ? _ref.constructor.name : void 0) === 'Value' && (((_ref1 = node.variable) != null ? (_ref2 = _ref1.base) != null ? _ref2.value : void 0 : void 0) != null);
    };

    Variable.is = function(node) {
      var _ref, _ref1;
      return !((_ref = node.documentation) != null ? _ref.property : void 0) && !((_ref1 = node.documentation) != null ? _ref1.mixin : void 0) && Variable.__super__.constructor.is.call(this, node);
    };

    function Variable(environment, file, node) {
      var _ref;
      this.environment = environment;
      this.file = file;
      this.node = node;
      _ref = this.fetchName(), this.name = _ref[0], this.selfish = _ref[1];
      this.constant = /^[A-Z_-]*$/.test(this.name);
      try {
        this.value = this.node.value.base.compile({
          indent: ''
        });
        if (this.value === 'void 0') {
          this.value = 'undefined';
        }
      } catch (_error) {}
      this.documentation = this.node.documentation;
    }

    Variable.prototype.inspect = function() {
      var _ref;
      return {
        file: this.file.path,
        name: this.name,
        constant: this.constant,
        value: this.value,
        documentation: (_ref = this.documentation) != null ? _ref.inspect() : void 0,
        selfish: this.selfish,
        kind: this.kind
      };
    };

    return Variable;

  })(Entity);

}).call(this);
