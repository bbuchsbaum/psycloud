// Generated by CoffeeScript 1.6.3
(function() {
  var Entities,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Entities = require('../_entities');

  module.exports = Entities.Property = (function(_super) {
    __extends(Property, _super);

    Property.looksLike = function(node) {
      var _ref, _ref1, _ref10, _ref11, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      return (node.constructor.name === 'Assign' && ((_ref = node.value) != null ? _ref.constructor.name : void 0) === 'Value') || (node.constructor.name === 'Call' && ((_ref1 = node.args) != null ? (_ref2 = _ref1[0]) != null ? (_ref3 = _ref2.base) != null ? (_ref4 = _ref3.properties) != null ? (_ref5 = _ref4[0]) != null ? (_ref6 = _ref5.variable) != null ? (_ref7 = _ref6.base) != null ? _ref7.value : void 0 : void 0 : void 0 : void 0 : void 0 : void 0 : void 0) && (((_ref8 = node.variable) != null ? (_ref9 = _ref8.base) != null ? _ref9.value : void 0 : void 0) === 'set' || ((_ref10 = node.variable) != null ? (_ref11 = _ref10.base) != null ? _ref11.value : void 0 : void 0) === 'get'));
    };

    Property.is = function(node) {
      var _ref;
      return (node.constructor.name === 'Call' || ((_ref = node.documentation) != null ? _ref.property : void 0)) && Property.__super__.constructor.is.call(this, node);
    };

    function Property(environment, file, node) {
      var _ref;
      this.environment = environment;
      this.file = file;
      this.node = node;
      if (this.node.constructor.name !== 'Call') {
        _ref = this.fetchVariableName(), this.name = _ref[0], this.selfish = _ref[1];
        this.setter = true;
        this.getter = true;
      } else {
        this.name = this.node.args[0].base.properties[0].variable.base.value;
        this.setter = this.node.variable.base.value === 'set';
        this.getter = this.node.variable.base.value === 'get';
      }
      this.documentation = this.node.documentation;
    }

    Property.prototype.fetchVariableName = function() {
      return this.fetchName();
    };

    Property.prototype.unite = function(property) {
      var attribute, _i, _len, _ref, _results;
      _ref = ['documentation', 'getter', 'setter'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attribute = _ref[_i];
        _results.push(property[attribute] = this[attribute] = property[attribute] || this[attribute]);
      }
      return _results;
    };

    Property.prototype.inspect = function() {
      var _ref;
      return {
        file: this.file.path,
        name: this.name,
        getter: this.getter,
        setter: this.setter,
        documentation: (_ref = this.documentation) != null ? _ref.inspect() : void 0
      };
    };

    return Property;

  })(require('../entity'));

}).call(this);
