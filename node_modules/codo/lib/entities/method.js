// Generated by CoffeeScript 1.6.3
(function() {
  var Entities, Parameter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Parameter = require('../meta/parameter');

  Entities = require('../_entities');

  module.exports = Entities.Method = (function(_super) {
    __extends(Method, _super);

    Method.looksLike = function(node) {
      var _ref;
      return node.constructor.name === 'Assign' && ((_ref = node.value) != null ? _ref.constructor.name : void 0) === 'Code';
    };

    function Method(environment, file, node) {
      var prop, _i, _len, _ref;
      this.environment = environment;
      this.file = file;
      this.node = node;
      this.name = [node.variable.base.value];
      _ref = this.node.variable.properties;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        if (prop.name != null) {
          this.name.push(prop.name.value);
        }
      }
      if (this.name[0] === 'this') {
        this.selfish = true;
        this.name = this.name.slice(1);
      }
      if (this.name[0] === 'module' && this.name[1] === 'exports') {
        this.name = this.name.slice(2);
      }
      if (this.name[0] === 'exports') {
        this.name = this.name.slice(1);
      }
      this.name = this.name.join('.');
      this.bound = this.node.value.bound;
      this.documentation = this.node.documentation;
      this.parameters = this.node.value.params.map(function(node) {
        return Parameter.fromNode(node);
      });
    }

    Method.prototype.inspect = function() {
      var _ref;
      return {
        file: this.file.path,
        name: this.name,
        bound: this.bound,
        documentation: (_ref = this.documentation) != null ? _ref.inspect() : void 0,
        selfish: this.selfish,
        kind: this.kind,
        parameters: this.parameters.map(function(x) {
          return x.inspect();
        })
      };
    };

    return Method;

  })(require('../entity'));

}).call(this);
