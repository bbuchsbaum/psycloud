// Generated by CoffeeScript 1.6.3
(function() {
  var Meta, Parameter;

  Parameter = require('./parameter');

  Meta = require('../_meta');

  module.exports = Meta.Method = (function() {
    Method.override = function(options, overrides) {
      var key, value;
      for (key in overrides) {
        value = overrides[key];
        options[key] = value;
      }
      return options;
    };

    Method.fromMethodEntity = function(entity, overrides) {
      var options;
      if (overrides == null) {
        overrides = {};
      }
      options = {
        name: entity.name,
        kind: entity.kind || '',
        bound: entity.bound,
        parameters: entity.parameters.map(function(x) {
          return x.toString();
        }),
        documentation: entity.documentation
      };
      return new this(this.override(options, overrides));
    };

    Method.fromDocumentationMethod = function(entry, overrides) {
      var kind, options;
      if (overrides == null) {
        overrides = {};
      }
      kind = (function() {
        switch (entry.signature[0]) {
          case '#':
            return 'dynamic';
          case '.':
            return 'static';
        }
      })();
      options = {
        name: entry.signature.replace(/^[\#\.]?([^\(]+)\(.+/, '$1'),
        kind: kind || '',
        parameters: Parameter.fromSignature(entry.signature).map(function(x) {
          return x.toString();
        }),
        documentation: entry.documentation
      };
      return new this(this.override(options, overrides));
    };

    function Method(options) {
      if (options == null) {
        options = {};
      }
      this.constructor.override(this, options);
    }

    Method.prototype.effectiveOverloads = function() {
      var overload, _i, _len, _ref, _ref1;
      if (this._effectiveOverloads != null) {
        return this._effectiveOverloads;
      }
      this._effectiveOverloads = [];
      if ((_ref = this.documentation) != null ? _ref.overloads : void 0) {
        _ref1 = this.documentation.overloads;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          overload = _ref1[_i];
          this._effectiveOverloads.push(Method.fromDocumentationMethod(overload));
        }
      } else {
        this._effectiveOverloads.push(this);
      }
      return this._effectiveOverloads;
    };

    Method.prototype.kindSignature = function() {
      switch (this.kind) {
        case 'dynamic':
          return '#';
        case 'static':
          return '.';
        default:
          return '~';
      }
    };

    Method.prototype.shortSignature = function() {
      return this.kindSignature() + this.name;
    };

    Method.prototype.typeSignature = function() {
      var _ref, _ref1;
      return '(' + (((_ref = this.documentation) != null ? (_ref1 = _ref.returns) != null ? _ref1.type : void 0 : void 0) || 'void') + ')';
    };

    Method.prototype.paramsSignature = function() {
      return '(' + this.parameters.join(', ') + ')';
    };

    Method.prototype.inspect = function() {
      return {
        name: this.name,
        kind: this.kind,
        bound: this.bound,
        parameters: this.parameters
      };
    };

    return Method;

  })();

}).call(this);
