// Generated by CoffeeScript 1.6.3
(function() {
  var CoffeeScript, Meta;

  CoffeeScript = require('coffee-script');

  Meta = require('../_meta');

  module.exports = Meta.Parameter = (function() {
    Parameter.fromNode = function(node) {
      return new this(this.fetchName(node), !!node.splat, this.fetchDefault(node));
    };

    Parameter.fromSignature = function(signature) {
      var nodes,
        _this = this;
      signature = signature.replace(/^.([^\(]+)/, "x=");
      nodes = CoffeeScript.nodes("" + signature + " ->").expressions[0].value.params;
      return nodes.map(function(node) {
        return _this.fromNode(node);
      });
    };

    Parameter.fetchName = function(node) {
      var name, o, v, vars, _ref;
      name = node.name.value;
      if (!name) {
        if ((o = node.name.objects) != null) {
          vars = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = o.length; _i < _len; _i++) {
              v = o[_i];
              if (v.base.value === 'this') {
                _results.push(v.properties[0].name.value);
              } else {
                _results.push(v.base.value);
              }
            }
            return _results;
          })();
          name = "{" + (vars.join(', ')) + "}";
        }
      }
      if (!name) {
        if (node.name.properties) {
          name = (_ref = node.name.properties[0]) != null ? _ref.name.value : void 0;
        }
      }
      return name;
    };

    Parameter.fetchDefault = function(node) {
      var error, value, _ref, _ref1, _ref2, _ref3;
      try {
        return (_ref = node.value) != null ? _ref.compile({
          indent: ''
        }) : void 0;
      } catch (_error) {
        error = _error;
        if ((node != null ? (_ref1 = node.value) != null ? (_ref2 = _ref1.base) != null ? _ref2.value : void 0 : void 0 : void 0) === 'this') {
          value = (_ref3 = node.value.properties[0]) != null ? _ref3.name.compile({
            indent: ''
          }) : void 0;
          return "@" + value;
        }
      }
    };

    function Parameter(name, splat, _default) {
      this.name = name;
      this.splat = splat;
      this["default"] = _default;
    }

    Parameter.prototype.toString = function() {
      var defauld, splat;
      if (this.splat) {
        splat = '...';
      }
      if (this["default"]) {
        defauld = " = " + this["default"];
      }
      return [this.name, splat, defauld].join('');
    };

    Parameter.prototype.inspect = function() {
      return {
        name: this.name,
        splat: this.splat,
        "default": this["default"]
      };
    };

    return Parameter;

  })();

}).call(this);
