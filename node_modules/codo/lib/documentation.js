// Generated by CoffeeScript 1.6.3
(function() {
  var Documentation;

  module.exports = Documentation = (function() {
    function Documentation(comment) {
      this.parseTags(comment);
    }

    Documentation.prototype.parseTags = function(lines) {
      var abstract, author, code, comment, concern, copyright, deprecated, doc, example, extend, include, innerComment, line, method, mixin, note, option, overload, param, property, returns, see, sentence, signature, since, text, throws, title, todo, version, _base, _base1, _name, _name1;
      comment = [];
      while ((line = lines.shift()) !== void 0) {
        if (!/^@example|@overload|@method/.exec(line)) {
          while (/^\s{2}\S+/.test(lines[0])) {
            line += lines.shift().substring(1);
          }
        }
        if (property = /^@nodoc/i.exec(line)) {
          this.nodoc = true;
        }
        if (property = /^@property\s+[\[\{](.+?)[\]\}](?:\s+(.+))?/i.exec(line)) {
          this.property = property[1];
          lines.push(property[2]);
        } else if (returns = /^@return\s+[\[\{](.+?)[\]\}](?:\s+(.+))?/i.exec(line)) {
          this.returns = {
            type: returns[1],
            description: returns[2]
          };
        } else if (returns = /^@return\s+(.+)/i.exec(line)) {
          this.returns = {
            type: '?',
            description: returns[1]
          };
        } else if (throws = /^@throw\s+[\[\{](.+?)[\]\}](?:\s+(.+))?/i.exec(line)) {
          if (this.throws == null) {
            this.throws = [];
          }
          this.throws.push({
            type: throws[1],
            description: throws[2]
          });
        } else if (throws = /^@throw\s+(.+)/i.exec(line)) {
          if (this.throws == null) {
            this.throws = [];
          }
          this.throws.push({
            type: '?',
            description: throws[1]
          });
        } else if (param = /^@param\s+([^ ]+)\s+[\[\{](.+?)[\]\}](?:\s+(.+))?/i.exec(line)) {
          if (this.params == null) {
            this.params = [];
          }
          this.params.push({
            type: param[2],
            name: param[1],
            description: param[3]
          });
        } else if (param = /^@param\s+[\[\{](.+?)[\]\}]\s+([^ ]+)(?:\s+(.+))?/i.exec(line)) {
          if (this.params == null) {
            this.params = [];
          }
          this.params.push({
            type: param[1],
            name: param[2],
            description: param[3]
          });
        } else if (option = /^@option\s+([^ ]+)\s+[\[\{](.+?)[\]\}]\s+([^ ]+)(?:\s+(.+))?/i.exec(line)) {
          if (this.options == null) {
            this.options = {};
          }
          if ((_base = this.options)[_name = option[1]] == null) {
            _base[_name] = [];
          }
          this.options[option[1]].push({
            type: option[2],
            name: option[3],
            description: option[4]
          });
        } else if (option = /^@option\s+([^ ]+)\s+([^ ]+)\s+[\[\{](.+?)[\]\}](?:\s+(.+))?/i.exec(line)) {
          if (this.options == null) {
            this.options = {};
          }
          if ((_base1 = this.options)[_name1 = option[1]] == null) {
            _base1[_name1] = [];
          }
          this.options[option[1]].push({
            type: option[3],
            name: option[2],
            description: option[4]
          });
        } else if (see = /^@see\s+([^\s]+)(?:\s+(.+))?/i.exec(line)) {
          if (this.see == null) {
            this.see = [];
          }
          this.see.push({
            reference: see[1],
            label: see[2]
          });
        } else if (author = /^@author\s+(.+)/i.exec(line)) {
          if (this.authors == null) {
            this.authors = [];
          }
          this.authors.push(author[1] || '');
        } else if (copyright = /^@copyright\s+(.+)/i.exec(line)) {
          this.copyright = copyright[1] || '';
        } else if (note = /^@note\s+(.+)/i.exec(line)) {
          if (this.notes == null) {
            this.notes = [];
          }
          this.notes.push(note[1] || '');
        } else if (todo = /^@todo\s+(.+)/i.exec(line)) {
          if (this.todos == null) {
            this.todos = [];
          }
          this.todos.push(todo[1] || '');
        } else if (example = /^@example(?:\s+(.+))?/i.exec(line)) {
          title = example[1] || '';
          code = [];
          while (/^\s{2}.*/.test(lines[0]) || (/^$/.test(lines[0]) && /^\s{2}.*/.test(lines[1]))) {
            code.push(lines.shift().substring(2));
          }
          if (code.length !== 0) {
            if (this.examples == null) {
              this.examples = [];
            }
            this.examples.push({
              title: title,
              code: code.join('\n')
            });
          }
        } else if (abstract = /^@abstract(?:\s+(.+))?/i.exec(line)) {
          this.abstract = abstract[1] || '';
        } else if (/^@private/.exec(line)) {
          this["private"] = true;
        } else if (since = /^@since\s+(.+)/i.exec(line)) {
          this.since = since[1] || '';
        } else if (version = /^@version\s+(.+)/i.exec(line)) {
          this.version = version[1] || '';
        } else if (deprecated = /^@deprecated(\s+)?(.*)/i.exec(line)) {
          this.deprecated = deprecated[2] || '';
        } else if (mixin = /^@mixin/i.exec(line)) {
          this.mixin = true;
        } else if (concern = /^@concern\s+(.+)/i.exec(line)) {
          if (this.concerns == null) {
            this.concerns = [];
          }
          this.concerns.push(concern[1]);
        } else if (include = /^@include\s+(.+)/i.exec(line)) {
          if (this.includes == null) {
            this.includes = [];
          }
          this.includes.push(include[1]);
        } else if (extend = /^@extend\s+(.+)/i.exec(line)) {
          if (this["extends"] == null) {
            this["extends"] = [];
          }
          this["extends"].push(extend[1]);
        } else if (overload = /^@overload\s+(.+)/i.exec(line)) {
          signature = overload[1];
          innerComment = [];
          while (/^\s{2}.*/.test(lines[0]) || /^\s*$/.test(lines[0])) {
            innerComment.push(lines.shift().substring(2));
          }
          if (innerComment.length !== 0) {
            if (this.overloads == null) {
              this.overloads = [];
            }
            doc = {};
            this.parseTags.call(doc, innerComment);
            this.overloads.push({
              signature: signature,
              documentation: doc
            });
          }
        } else if (method = /^@method\s+(.+)/i.exec(line)) {
          signature = method[1];
          innerComment = [];
          while (/^\s{2}.*/.test(lines[0]) || /^\s*$/.test(lines[0])) {
            innerComment.push(lines.shift().substring(2));
          }
          if (innerComment.length !== 0) {
            if (this.methods == null) {
              this.methods = [];
            }
            doc = {};
            this.parseTags.call(doc, innerComment);
            this.methods.push({
              signature: signature,
              documentation: doc
            });
          }
        } else {
          comment.push(line);
        }
      }
      text = comment.join('\n');
      this.comment = text.trim();
      sentence = /((?:.|\n)*?[.#][\s$])/.exec(text);
      if (sentence) {
        sentence = sentence[1].replace(/\s*#\s*$/, '');
      }
      return this.summary = (sentence || text || '').trim();
    };

    Documentation.prototype.inspect = function() {
      return {
        comment: this.comment,
        summary: this.summary,
        notes: this.notes,
        see: this.see,
        abstract: this.abstract,
        "private": this["private"],
        deprecated: this.deprecated,
        version: this.version,
        since: this.since,
        authors: this.authors,
        copyright: this.copyright,
        todos: this.todos,
        includes: this.includes,
        "extends": this["extends"],
        concerns: this.concerns,
        examples: this.examples,
        params: this.params,
        options: this.options,
        returns: this.returns,
        throws: this.throws,
        overloads: this.overloads,
        methods: this.methods,
        property: this.property
      };
    };

    return Documentation;

  })();

}).call(this);
