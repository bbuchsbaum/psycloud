// Generated by CoffeeScript 1.6.3
(function() {
  var Codo, Command, Optimist, Path, Table, Theme;

  Path = require('path');

  Codo = require('./codo');

  Optimist = require('optimist');

  Theme = require('../themes/default/lib/theme');

  Table = require('cli-table');

  module.exports = Command = (function() {
    Command.prototype.options = [
      {
        name: 'help',
        alias: 'h',
        describe: 'Show this help'
      }, {
        name: 'version',
        describe: 'Show version'
      }, {
        name: 'output',
        alias: 'o',
        describe: 'The output directory',
        "default": './doc'
      }, {
        name: 'output-dir'
      }, {
        name: 'theme',
        describe: 'The theme to be used',
        "default": 'default'
      }, {
        name: 'name',
        alias: 'n',
        describe: 'The project name used'
      }, {
        name: 'readme',
        alias: 'r',
        describe: 'The readme file used'
      }, {
        name: 'quiet',
        alias: 'q',
        describe: 'Supress warnings',
        boolean: true,
        "default": false
      }, {
        name: 'verbose',
        alias: 'v',
        describe: 'Show parsing errors',
        boolean: true,
        "default": false
      }, {
        name: 'undocumented',
        alias: 'u',
        describe: 'List undocumented objects',
        boolean: true,
        "default": false
      }, {
        name: 'closure',
        describe: 'Try to parse closure-like block comments',
        boolean: true,
        "default": false
      }, {
        name: 'debug',
        alias: 'd',
        boolean: true
      }
    ];

    Command.run = function() {
      return new this;
    };

    Command.prototype.extendOptimist = function(optimist, defaults, options) {
      var option, _i, _len, _results;
      if (defaults == null) {
        defaults = {};
      }
      if (options == null) {
        options = {};
      }
      _results = [];
      for (_i = 0, _len = options.length; _i < _len; _i++) {
        option = options[_i];
        _results.push(optimist.options(option.name, {
          alias: option.alias,
          describe: option.describe,
          boolean: option.boolean,
          "default": defaults[option.name] || defaults[option.alias] || option["default"]
        }));
      }
      return _results;
    };

    Command.prototype.lookupTheme = function(name) {
      if (name === 'default') {
        return this.theme = Theme;
      } else {
        try {
          return this.theme = require("codo-theme-" + name);
        } catch (_error) {
          try {
            return this.theme = require(Path.resolve("node_modules/codo-theme-" + name));
          } catch (_error) {
            console.log("Error loading theme " + name + ": are you sure you have codo-theme-" + name + " package installed?");
            return process.exit();
          }
        }
      }
    };

    Command.prototype.prepareOptions = function(optimist, defaults) {
      var entry, keyword, options, _i, _j, _len, _len1, _ref, _ref1;
      options = optimist.argv;
      _ref = defaults._;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        options._.push(entry);
      }
      keyword = 'inputs';
      _ref1 = options._;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        entry = _ref1[_j];
        if (entry === '-') {
          keyword = 'extras';
        } else {
          if (options[keyword] == null) {
            options[keyword] = [];
          }
          options[keyword].push(entry);
        }
      }
      delete options._;
      return options;
    };

    function Command() {
      var defaults, optimist;
      defaults = Codo.detectDefaults(process.cwd());
      optimist = Optimist.usage('Usage: $0 [options] [source_files [- extra_files]]');
      this.extendOptimist(optimist, defaults, this.options);
      this.theme = this.lookupTheme(optimist.argv.theme);
      this.extendOptimist(optimist, defaults, this.theme.prototype.options);
      this.options = this.prepareOptions(optimist, defaults);
      if (this.options['output-dir']) {
        console.log("The usage of outdated `--output-dir` option detected. Please switch to `--output`.");
        process.exit();
      }
      if (this.options.help) {
        console.log(optimist.help());
      } else if (this.options.version) {
        console.log(Codo.version());
      } else {
        this.generate();
      }
    }

    Command.prototype.collectStats = function(environment) {
      var sections;
      sections = {
        Classes: {
          total: environment.allClasses().length,
          undocumented: environment.allClasses().filter(function(e) {
            return e.documentation == null;
          }).map(function(x) {
            return [x.name, x.file.path];
          })
        },
        Mixins: {
          total: environment.allMixins().length,
          undocumented: environment.allMixins().filter(function(e) {
            return e.documentation == null;
          }).map(function(x) {
            return [x.name, x.file.path];
          })
        },
        Methods: {
          total: environment.allMethods().length,
          undocumented: environment.allMethods().filter(function(e) {
            return e.entity.documentation == null;
          }).map(function(x) {
            return ["" + x.entity.name + " (" + x.owner.name + ")", x.owner.file.path];
          })
        }
      };
      return sections;
    };

    Command.prototype.generate = function() {
      var data, entry, environment, overall, section, sections, table, undocumented, _i, _len, _ref, _results;
      environment = Codo.parseProject(process.cwd(), this.options);
      sections = this.collectStats(environment);
      this.theme.compile(environment);
      if (this.options.undocumented) {
        _results = [];
        for (section in sections) {
          data = sections[section];
          if (!(data.undocumented.length !== 0)) {
            continue;
          }
          table = new Table({
            head: [section, 'Path']
          });
          _ref = data.undocumented;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            entry = _ref[_i];
            table.push(entry);
          }
          console.log(table.toString());
          _results.push(console.log(''));
        }
        return _results;
      } else {
        overall = 0;
        undocumented = 0;
        for (section in sections) {
          data = sections[section];
          overall += data.total;
          undocumented += data.undocumented.length;
        }
        table = new Table({
          head: ['', 'Total', 'Undocumented']
        });
        table.push(['Files', environment.allFiles().length, ''], ['Extras', environment.allExtras().length, ''], ['Classes', sections['Classes'].total, sections['Classes'].undocumented.length], ['Mixins', sections['Mixins'].total, sections['Mixins'].undocumented.length], ['Methods', sections['Methods'].total, sections['Methods'].undocumented.length]);
        console.log(table.toString());
        console.log('');
        console.log("  Totally documented: " + ((100 - 100 / overall * undocumented).toFixed(2)) + "%");
        return console.log('');
      }
    };

    return Command;

  })();

}).call(this);
