// Generated by CoffeeScript 1.6.3
(function() {
  var Class, Environment, Extra, FS, File, Method, Mixin, Path, Property, Traverser, Variable, Winston, walkdir;

  FS = require('fs');

  Path = require('path');

  Traverser = require('./traverser');

  File = require('./entities/file');

  Class = require('./entities/class');

  Method = require('./entities/method');

  Variable = require('./entities/variable');

  Property = require('./entities/property');

  Mixin = require('./entities/mixin');

  Extra = require('./entities/extra');

  walkdir = require('walkdir');

  Winston = require('winston');

  module.exports = Environment = (function() {
    Environment.read = function(files, options) {
      var environment, file, _i, _len;
      if (options == null) {
        options = {};
      }
      if (!Array.isArray(files)) {
        files = [files];
      }
      environment = new this(options);
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        environment.readCoffee(file);
      }
      environment.linkify();
      return environment;
    };

    function Environment(options) {
      var _base, _base1, _base2, _base3, _base4, _base5, _base6, _base7;
      this.options = options != null ? options : {};
      this.version = JSON.parse(FS.readFileSync(Path.join(__dirname, '..', 'package.json'), 'utf-8'))['version'];
      if ((_base = this.options).name == null) {
        _base.name = 'Unknown Project';
      }
      if ((_base1 = this.options).verbose == null) {
        _base1.verbose = false;
      }
      if ((_base2 = this.options).debug == null) {
        _base2.debug = false;
      }
      if ((_base3 = this.options).cautios == null) {
        _base3.cautios = false;
      }
      if ((_base4 = this.options).quiet == null) {
        _base4.quiet = false;
      }
      if ((_base5 = this.options).closure == null) {
        _base5.closure = false;
      }
      if ((_base6 = this.options).output == null) {
        _base6.output = 'doc';
      }
      if ((_base7 = this.options).basedir == null) {
        _base7.basedir = process.cwd();
      }
      this.needles = [];
      this.entities = [];
      this.references = {};
      this.parsed = {};
      this.needles.push(Class);
      this.needles.push(Method);
      this.needles.push(Variable);
      this.needles.push(Property);
      this.needles.push(Mixin);
    }

    Environment.prototype.readCoffee = function(file) {
      var error;
      if (this.parsed[file]) {
        return;
      }
      if (this.options.verbose) {
        Winston.info("Parsing Codo file " + file);
      }
      try {
        return Traverser.read(file, this);
      } catch (_error) {
        error = _error;
        if (this.options.debug) {
          throw error;
        }
        if (!this.options.quiet) {
          return Winston.error("Cannot parse Coffee file " + file + ": " + error.message);
        }
      } finally {
        this.parsed[file] = true;
      }
    };

    Environment.prototype.readExtra = function(file) {
      var error;
      if (this.parsed[file]) {
        return;
      }
      if (this.options.verbose) {
        Winston.info("Parsing Extra file " + file);
      }
      try {
        return this.registerEntity(new Extra(this, file));
      } catch (_error) {
        error = _error;
        if (this.options.debug) {
          throw error;
        }
        if (!this.options.quiet) {
          return Winston.error("Cannot parse Extra file " + file + ": " + error.message);
        }
      } finally {
        this.parsed[file] = true;
      }
    };

    Environment.prototype.registerEntity = function(entity) {
      return this.entities.push(entity);
    };

    Environment.prototype.all = function(Entity, haystack) {
      var entity, _i, _len, _ref;
      if (haystack == null) {
        haystack = [];
      }
      _ref = this.entities;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (entity instanceof Entity) {
          haystack.push(entity);
        }
      }
      return haystack;
    };

    Environment.prototype.allFiles = function() {
      return this._allFiles || (this._allFiles = this.all(File));
    };

    Environment.prototype.allClasses = function() {
      return this._allClasses || (this._allClasses = this.all(Class));
    };

    Environment.prototype.allMixins = function() {
      return this._allMixins || (this._allMixins = this.all(Mixin));
    };

    Environment.prototype.allExtras = function() {
      return this._allExtras || (this._allExtras = this.all(Extra));
    };

    Environment.prototype.allMethods = function() {
      var entry, method, source, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      if (this._allMethods != null) {
        return this._allMethods;
      }
      this._allMethods = [];
      _ref = [this.allFiles(), this.allClasses(), this.allMixins()];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        source = _ref[_i];
        for (_j = 0, _len1 = source.length; _j < _len1; _j++) {
          entry = source[_j];
          _ref1 = entry.effectiveMethods();
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            method = _ref1[_k];
            this._allMethods.push({
              entity: method,
              owner: entry
            });
          }
        }
      }
      return this._allMethods.sort(function(a, b) {
        if (a.entity.name < b.entity.name) {
          return -1;
        }
        if (a.entity.name > b.entity.name) {
          return 1;
        }
        return 0;
      });
    };

    Environment.prototype.allVariables = function() {
      var entry, source, variable, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      if (this._allVariables != null) {
        return this._allVariables;
      }
      this._allVariables = [];
      _ref = [this.allFiles(), this.allClasses(), this.allMixins()];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        source = _ref[_i];
        for (_j = 0, _len1 = source.length; _j < _len1; _j++) {
          entry = source[_j];
          _ref1 = entry.variables;
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            variable = _ref1[_k];
            this._allVariables.push({
              entity: variable,
              owner: entry
            });
          }
        }
      }
      return this._allVariables;
    };

    Environment.prototype.find = function(Entity, name) {
      var entity, _i, _len, _ref;
      _ref = this.entities;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (entity instanceof Entity && entity.name === name) {
          return entity;
        }
      }
    };

    Environment.prototype.findReadme = function() {
      return this.find(Extra, Path.relative(this.options.basedir, this.options.readme));
    };

    Environment.prototype.linkify = function() {
      var basic, basics, entity, keyword, method, variable, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _results;
      _ref = this.entities;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        entity.linkify();
      }
      _ref1 = [this.allFiles(), this.allClasses(), this.allMixins()];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        basics = _ref1[_j];
        for (_k = 0, _len2 = basics.length; _k < _len2; _k++) {
          basic = basics[_k];
          this.references[basic.name] = basic;
        }
      }
      _ref2 = this.allVariables();
      for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
        variable = _ref2[_l];
        keyword = variable.owner.name + '.' + variable.entity.name;
        this.references[keyword] = variable;
      }
      _ref3 = this.allMethods();
      _results = [];
      for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
        method = _ref3[_m];
        keyword = method.owner.name + method.entity.shortSignature();
        _results.push(this.references[keyword] = method);
      }
      return _results;
    };

    Environment.prototype.reference = function(needle, context) {
      if (context == null) {
        context = '';
      }
      needle = needle.split(' ')[0];
      if (this.references[needle]) {
        return this.references[needle];
      } else if (this.references[context + needle]) {
        return this.references[context + needle];
      } else {
        return needle;
      }
    };

    Environment.prototype.inspect = function() {
      return this.entities.map(function(entity) {
        return entity.inspect();
      });
    };

    return Environment;

  })();

}).call(this);
