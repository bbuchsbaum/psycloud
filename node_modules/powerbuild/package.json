{
  "name": "powerbuild",
  "version": "0.0.11",
  "description": "CommonJS bundler with aliasing, extensibility, and source maps from the minified JS bundle. Forked from commonjs-everywhere adding speed improvements, persistent disk cache for incremental builds, support for reading '// [#@] sourceMappingURL' from input files and bundled grunt task",
  "homepage": "https://github.com/tarruda/powerbuild",
  "keywords": [
    "CommonJS",
    "CommonJS Everywhere",
    "browser",
    "build",
    "bundle",
    "cjsify",
    "browserify",
    "dependency resolution"
  ],
  "author": {
    "name": "Michael Ficarra",
    "email": "git@michael.ficarra.me"
  },
  "contributors": [
    {
      "name": "Thiago de arruda",
      "email": "tpadilha84@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/tarruda/powerbuild.git"
  },
  "bugs": {
    "url": "https://github.com/tarruda/powerbuild/issues"
  },
  "engines": {
    "node": "0.8.x || 0.9.x || 0.10.x"
  },
  "main": "lib/index",
  "directories": {
    "bin": "bin",
    "lib": "lib",
    "test": "test"
  },
  "dependencies": {
    "Base64": "~0.1.2",
    "mktemp": "~0.3.0",
    "nopt": "~2.1.2",
    "resolve": "0.6.1",
    "source-map": "~0.1.30",
    "lodash": "~2.2.1",
    "uglify-js": "~2.4.0",
    "estraverse": "~1.3.1",
    "escodegen": "0.0.27",
    "esprima": "~1.0.4",
    "escope": "~1.0.0",
    "sourcemap-to-ast": "0.0.1",
    "browser-builtins": "~2.0.4"
  },
  "devDependencies": {
    "scopedfs": "~0.1.0",
    "grunt": "~0.4.1",
    "grunt-release": "~0.6.0",
    "grunt-mocha-debug": "0.0.6",
    "grunt-contrib-watch": "~0.5.3",
    "source-map-support": "~0.2.3",
    "grunt-newer": "~0.5.4",
    "grunt-contrib-coffee": "~0.7.0",
    "coffee-script": "~1.6.3"
  },
  "scripts": {
    "test": "make test"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "https://github.com/tarruda/powerbuild/blob/master/LICENSE"
    }
  ],
  "bin": {
    "powerbuild": "bin/powerbuild"
  },
  "readme": "# Powerbuild\n\n> CommonJS bundler with aliasing, extensibility, and source maps from the minified JS bundle. Forked from commonjs-everywhere adding speed improvements, persistent disk cache for incremental builds, support for reading '// [#@] sourceMappingURL' from input files and bundled grunt task\n\n## Quickstart\n\nUse [this grunt-init template](https://github.com/tarruda/grunt-init-js-commonjs) which setups a project with powerbuild, automated testing with node.js, phantomjs, travis and saucelabs.\n\n## Main changes from commonjs-everywhere\n\n  - Escodegen is only used when generating partial source maps, the final\n    result is computed manually.\n  - For minification esmangle/escodegen is replaced by UglifyJS for two\n    reasons:\n    * It was breaking in some of my tests\n    * It is 10x slower than UglifyJS. For a bundle with 50k lines of code\n      UglifyJS took about 4 seconds versus 35 seconds from esmangle/escodegen)\n  - Dependency on coffee-script-redux was removed. While its still possible\n    to use the 'handlers' option to build compile-to-js languages directly,\n    this tool now reads '// @sourceMappingURL' tags from the end of the file\n    in order to map correctly to the original files. This means any\n    compile-to-js language that produces source maps is supported out-of-box.\n  - By default, source maps for npm dependencies are not included.\n  - Module paths are replaced by unique identifiers, which leads to a small\n    improvement in the resulting size. When the __filename or __dirname\n    variables are used, a mapping for that module uid to the filename will\n    be used.\n  - Multiple entry points can be specified, with the last being exported\n    if the 'export' option is used. This can be used to create test bundles.\n  - The result is wrapped into [UMD](https://github.com/umdjs/umd).\n  - If the 'node' option is unset, it will disable node.js emulation and\n    inclusion of core modules. The result can be loaded as a normal node.js\n    module.\n\n\n## Install\n\n    npm install -g powerbuild\n\n## Usage\n\n### CLI\n\n    $ bin/powerbuild --help\n\n      Usage: powerbuild OPT* ENTRY_FILE+ OPT*\n\n      -a, --alias ALIAS:TO      replace requires of file identified by ALIAS with TO\n      -h, --handler EXT:MODULE  handle files with extension EXT with module MODULE\n      -m, --minify              minify output using uglify.js\n      -c, --compress            Compress/optimize code when minifying\n                                (automatically enabled by this option). Enabling\n                                will break the generated source map.\n      -o, --output FILE         output to FILE instead of stdout\n      -r, --root DIR            unqualified requires are relative to DIR; default: cwd\n      -s, --source-map FILE     output a source map to FILE\n      -v, --verbose             verbose output sent to stderr\n      -w, --watch               watch input files/dependencies for changes and rebuild bundle\n      -x, --export NAME         export the last given entry module as NAME\n      --deps                    do not bundle; just list the files that would be bundled\n      --help                    display this help message and exit\n      --ignore-missing          continue without error when dependency resolution fails\n      --inline-source-map       include the source map as a data URI in the generated bundle\n      --inline-sources          include source content in generated source maps\n      --node                    if needed by any module, emulate a node.js \n                                environment by including globals such as Buffer,\n                                process and setImmediate; default: on\n      --cache-path              file where to read/write a json-encoded cache that\n                                is used for fast, incremental builds.\n                                default: '.powerbuild-cache~' in the current\n                                directory\n      --disable-disk-cache      disables persistence of incremental build cache\n                                to disk. Incremental build will only work with the\n                                --watch option\n      --npm-source-maps         add mappings for npm modules in the resulting\n                                source map(significantly increases the build time)\n      --version                 display the version number and exit\n\n*Note:* use `-` as an entry file to accept JavaScript over stdin\n\n*Note:* to disable an option, prefix it with `no-`, e.g. `--no-node`\n\n#### Example:\n\nCommon usage, a single entry point which will be used to build the entire\ndependency graph. Whatever is exported by 'entry-file.js' will go to the\nglobal property 'MyLibrary':\n\n```bash\npowerbuild src/entry-file.js --export MyLibrary --source-map my-library.js.map >my-library.js\n```\n\nSpecify multiple entry points which will be \"required\" at startup. Only\nthe last entry point will be exported when used in conjunction with the\n'--export' option. This is mostly useful for building test bundles which\ncan be referenced from a single 'script' tag\n\n```bash\npowerbuild test/*.js --source-map tests.js.map -o tests.js\n```\n\nWatch every file in the dependency graph and rebuild when a file changes.\nUnlike commonjs-everywhere, this tool caches partial builds to disk, so this\nis not necessary for incremental builds.\n\n```bash\npowerbuild -wo my-library.js -x MyLibrary src/entry-file.js \n```\n\nUse a browser-specific version of `/lib/node-compatible.js` (remember to use\n`root`-relative paths for aliasing). An empty alias target is used to delay\nerrors to runtime when requiring the source module (`fs` in this case). The\n'browser' field in package.json will also be used if available when building\nbundles with node.js emulation(which is the default). \n\n```bash\npowerbuild -a /lib/node-compatible.js:/lib/browser-compatible.js -a fs: -x MyLibrary lib/entry-file.js\n```\n\n### Module Interface\n\n#### `new Powerbuild(options)`\nConstructor for an object that can keeps track of build options and is used to\ntrigger incremental rebuilds.\n\n* `options` is an object that can contain the following properties:\n    * `entryPoints` is an array of filenames relative to `process.cwd()` that\n      will be used to initialize the bundle. The last item in this array will\n      also be used when the 'export' option is specified\n    * `root`: Same as cli.\n    * `export`: Same as cli.\n    * `aliases`: an object whose keys and values are `root`-rooted paths\n      (`/src/file.js`), representing values that will replace requires that\n      resolve to the associated keys\n    * `handlers`: an object whose keys are file extensions (`'.coffee'`) and\n      whose values are functions that receives the file contents as arguments\n      and returns one of the following:\n        - Spidermonkey-format JS AST like the one esprima produces\n        - A string of javascript\n        - An object with the keys 'code' and 'map' containing strings with\n          javascript and sourcemaps respectively.\n      A handler for JSON is included by default. If no handler is defined for\n      a file extension, it is assumed to be JavaScript. (The default\n      coffeescript-redux handler was removed because this tool now reads\n      '// @sourceMappingURL' comment tags, so it can be used in conjunction\n      with the default coffeescript compiler)\n    * `node`: Same as cli. When true(default) the bundling phase will emit\n      globals for 'process', 'Buffer' or 'setImmediate' if any of those are\n      used by any of the bundled modules. Setting this to false will completely\n      disable node.js emulation, excluding core node.js modules(path, util...)\n      from the bundle. This may be used to create bundles targeted at node.js.\n      (While this will not be a very common case, it can be used for example\n      to distribute node.js apps as a single javascript file containing all\n      dependencies).\n    * `verbose`: Same as cli.\n    * `ignoreMissing`: Same as cli.\n    * `minify`: Same as cli.\n    * `compress`: Same as cli.\n    * `output`: Name of the output file. The file will not be written, this\n       is used when building the source map.\n    * `sourceMap`: Same as cli. This may be true to make the source map have\n      the same name as 'output' with '.map' appended.\n    * `sourceMappingURLRoot`: Prefix for the 'sourceMappingURL' value. Useful\n       if you want to host your source maps in a different server.\n    * `inlineSourceMap`: Same as cli.\n    * `inlineSources`: Same as cli.\n    * `npmSourceMaps`: Same as cli. This is disabled by default because\n      it greatly increases build efficiency and normally you wont care about\n      debugging external modules.\n\n\n### Grunt task\n\nThis package includes a grunt task that takes any of the API or cli options(\nwith dashes removed and converted to camelCase). For an example see this\npackage's [test bundle configuration](https://github.com/tarruda/powerbuild/blob/master/Gruntfile.coffee)\n\n## Examples\n\n### CLI example\n\nSay we have the following directory tree:\n\n```\n* todos/\n  * components/\n    * users/\n      - model.coffee\n    * todos/\n      - index.coffee\n  * public/\n    * javascripts/\n```\nRunning the following command will export `index.coffee` and its dependencies as `App.Todos`.\n\n```\npowerbuild -o public/javascripts/app.js -x App.Todos -r components components/todos/index.coffee\n```\n\nSince the above command specifies `components` as the root directory for\nunqualified requires, we are able to require `components/users/model.coffee`\nwith `require 'users/model'`. The output file will be\n`public/javascripts/app.js`.\n\n### Node Module Example\n\n```coffee\nopts.root = 'components'\nopts.entryPoints = ['index.coffee']\npowerbuild = new Powerbuild opts\n{code, map} = powerbuild.bundle()\n```\n",
  "readmeFilename": "README.md",
  "_id": "powerbuild@0.0.11",
  "_from": "powerbuild@"
}
