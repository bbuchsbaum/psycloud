(function() {
  var caches, defaultCachePath, fs, initSignalHandlers, initialized, path,
    __hasProp = {}.hasOwnProperty;

  fs = require('fs');

  path = require('path');

  initialized = false;

  initSignalHandlers = function() {
    if (initialized) {
      return;
    }
    initialized = true;
    process.on('exit', function() {
      var cache, cachePath, _results;
      _results = [];
      for (cachePath in caches) {
        if (!__hasProp.call(caches, cachePath)) continue;
        cache = caches[cachePath];
        _results.push(fs.writeFileSync(cachePath, JSON.stringify(cache)));
      }
      return _results;
    });
    process.on('SIGINT', process.exit);
    process.on('SIGTERM', process.exit);
    return process.on('uncaughtException', function(e) {
      var cachePath;
      for (cachePath in caches) {
        if (!__hasProp.call(caches, cachePath)) continue;
        if (fs.existsSync(cachePath)) {
          fs.unlinkSync(cachePath);
        }
      }
      throw e;
    });
  };

  caches = {};

  defaultCachePath = path.join(process.cwd(), '.powerbuild~');

  module.exports = function(node, cachePath) {
    if (node == null) {
      node = true;
    }
    if (cachePath == null) {
      cachePath = defaultCachePath;
    }
    if ({}.hasOwnProperty.call(caches, cachePath) && caches[cachePath].node === node) {
      return caches[cachePath];
    }
    initSignalHandlers();
    if (!caches[cachePath] && fs.existsSync(cachePath)) {
      caches[cachePath] = JSON.parse(fs.readFileSync(cachePath, 'utf8'));
    }
    if (caches[cachePath] && caches[cachePath].node !== node) {
      console.error("Warning: Configurations with different values for the 'node' option cannot share the same cache(reseting " + cachePath + ")");
      delete caches[cachePath];
    }
    if (!caches[cachePath]) {
      caches[cachePath] = {
        processed: {},
        uids: {
          next: 1,
          names: {}
        },
        node: node
      };
    }
    return caches[cachePath];
  };

}).call(this);

/*
//@ sourceMappingURL=build-cache.js.map
*/