(function() {
  var Powerbuild, bundle, esprima, path, traverseDependencies, _,
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  _ = require('lodash');

  esprima = require('esprima');

  path = require('path');

  bundle = require('./bundle');

  traverseDependencies = require('./traverse-dependencies');

  Powerbuild = (function() {
    function Powerbuild(options) {
      var canonicalName, ext, handler, _i, _len, _ref, _ref1, _ref2;
      if (options["export"] && options.entryPoints.length !== 1) {
        throw new Error('Can only set the export option with one entry point');
      }
      if (options.inlineSources == null) {
        options.inlineSources = false;
      }
      if (options.compress) {
        options.minify = true;
      }
      options.disableSourceMap || (options.disableSourceMap = []);
      options.uids || (options.uids = {
        next: 1,
        names: {}
      });
      if (options.npmSourceMaps == null) {
        options.npmSourceMaps = false;
      }
      if (options.sourceMappingURLRoot == null) {
        options.sourceMappingURLRoot = '';
      }
      options.root || (options.root = process.cwd());
      if (options.node == null) {
        options.node = true;
      }
      this.output = options.output, this["export"] = options["export"], this.entryPoints = options.entryPoints, this.root = options.root, this.node = options.node, this.inlineSources = options.inlineSources, this.verbose = options.verbose, this.ignoreMissing = options.ignoreMissing, this.sourceMap = options.sourceMap, this.inlineSourceMap = options.inlineSourceMap, this.mainModule = options.mainModule, this.minify = options.minify, this.aliases = options.aliases, this.handlers = options.handlers, this.processed = options.processed, this.uids = options.uids, this.npmSourceMaps = options.npmSourceMaps, this.compress = options.compress, this.debug = options.debug, this.sourceMappingURLRoot = options.sourceMappingURLRoot;
      this.disableSourceMap = {};
      _ref = options.disableSourceMap;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        canonicalName = _ref[_i];
        this.disableSourceMap[canonicalName] = true;
      }
      if (this.output) {
        if (this.sourceMap === true) {
          this.sourceMap = "" + this.output + ".map";
        }
      }
      this.sourceMapRoot = this.sourceMap != null ? path.relative(path.dirname(this.sourceMap), this.root) : '.';
      this.handlers = {
        '.json': function(json, canonicalName) {
          return esprima.parse("module.exports = " + json, {
            loc: true
          });
        }
      };
      _ref2 = (_ref1 = options.handlers) != null ? _ref1 : {};
      for (ext in _ref2) {
        if (!__hasProp.call(_ref2, ext)) continue;
        handler = _ref2[ext];
        this.handlers[ext] = handler;
      }
      this.extensions = ['.js'].concat(__slice.call((function() {
          var _ref3, _results;
          _ref3 = this.handlers;
          _results = [];
          for (ext in _ref3) {
            if (!__hasProp.call(_ref3, ext)) continue;
            _results.push(ext);
          }
          return _results;
        }).call(this)));
    }

    Powerbuild.prototype.bundle = function() {
      return bundle(this, this.traverseDependencies());
    };

    Powerbuild.prototype.traverseDependencies = function() {
      var processed;
      processed = traverseDependencies(this, this.processed);
      if (this.verbose) {
        console.error("Included modules: " + ((Object.keys(processed)).sort()));
      }
      return processed;
    };

    Powerbuild.prototype.uidFor = function(name) {
      var uid;
      if (this.debug) {
        return name;
      }
      if (!{}.hasOwnProperty.call(this.uids.names, name)) {
        uid = this.uids.next++;
        this.uids.names[name] = uid;
      }
      return this.uids.names[name];
    };

    return Powerbuild;

  })();

  module.exports = Powerbuild;

}).call(this);

/*
//@ sourceMappingURL=index.js.map
*/