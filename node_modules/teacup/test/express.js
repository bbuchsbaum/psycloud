// Generated by CoffeeScript 1.6.3
(function() {
  var expect, renderFile;

  expect = require('expect.js');

  renderFile = require('../lib/express').renderFile;

  describe('express', function() {
    return describe('renderFile', function() {
      var params, path, _ref;
      _ref = {}, path = _ref.path, params = _ref.params;
      beforeEach(function() {
        path = "" + __dirname + "/express_template.coffee";
        return params = {
          name: 'Foo'
        };
      });
      it('renders a template from file', function(done) {
        return renderFile(path, params, function(err, rendered) {
          if (err != null) {
            return done(err);
          }
          expect(rendered).to.equal('<p>Name is Foo</p>');
          return done();
        });
      });
      it("returns error if not found", function(done) {
        return renderFile('./not_found.coffee', params, function(err, rendered) {
          expect(err).not.to.be(void 0);
          return done();
        });
      });
      describe('with view cache enabled', function() {
        beforeEach(function() {
          return params.app = {
            enabled: function() {
              return true;
            }
          };
        });
        return it('loads from the require cache', function(done) {
          return renderFile(path, params, function(err, rendered) {
            if (err != null) {
              return done(err);
            }
            expect(rendered).to.equal('<p>Name is Foo</p>');
            require(path).isSameTemplate = true;
            return renderFile(path, params, function(err, rendered) {
              expect(require(path).isSameTemplate).to.be.ok();
              return done();
            });
          });
        });
      });
      return describe('with view cache disabled', function() {
        beforeEach(function() {
          return params.app = {
            enabled: function() {
              return false;
            }
          };
        });
        return it('does not use cached template', function(done) {
          return renderFile(path, params, function(err, rendered) {
            if (err != null) {
              return done(err);
            }
            expect(rendered).to.equal('<p>Name is Foo</p>');
            require(path).isSameTemplate = true;
            return renderFile(path, params, function(err, rendered) {
              expect(require(path).isSameTemplate).to.not.be.ok();
              return done();
            });
          });
        });
      });
    });
  });

}).call(this);
