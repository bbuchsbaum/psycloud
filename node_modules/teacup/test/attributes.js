// Generated by CoffeeScript 1.6.3
(function() {
  var a, br, expect, render, _ref;

  expect = require('expect.js');

  _ref = require('..'), render = _ref.render, a = _ref.a, br = _ref.br;

  describe('Attributes', function() {
    describe('with a hash', function() {
      return it('renders the corresponding HTML attributes', function() {
        var template;
        template = function() {
          return a({
            href: '/',
            title: 'Home'
          });
        };
        return expect(render(template)).to.equal('<a href="/" title="Home"></a>');
      });
    });
    describe('Boolean true value', function() {
      return it('is replaced with the attribute name.  Useful for attributes like disabled', function() {
        var template;
        template = function() {
          return br({
            foo: true,
            bar: true
          });
        };
        return expect(render(template)).to.equal('<br foo="foo" bar="bar" />');
      });
    });
    describe('Boolean false value', function() {
      return it('is omitted', function() {
        var template;
        template = function() {
          return br({
            foo: false,
            bar: false
          });
        };
        return expect(render(template)).to.equal('<br />');
      });
    });
    describe('null and undefined value', function() {
      return it('is omitted', function() {
        var template;
        template = function() {
          return br({
            foo: null,
            bar: void 0
          });
        };
        return expect(render(template)).to.equal('<br foo bar />');
      });
    });
    describe('string value', function() {
      return it('is used verbatim', function() {
        var template;
        template = function() {
          return br({
            foo: 'true',
            bar: 'str'
          });
        };
        return expect(render(template)).to.equal('<br foo="true" bar="str" />');
      });
    });
    describe('number value', function() {
      return it('is stringified', function() {
        var template;
        template = function() {
          return br({
            foo: 2,
            bar: 15.55
          });
        };
        return expect(render(template)).to.equal('<br foo="2" bar="15.55" />');
      });
    });
    describe('array value', function() {
      return it('is comma separated', function() {
        var template;
        template = function() {
          return br({
            foo: [1, 2, 3]
          });
        };
        return expect(render(template)).to.equal('<br foo="1,2,3" />');
      });
    });
    return describe('data attribute', function() {
      return it('expands attributes', function() {
        var template;
        template = function() {
          return br({
            data: {
              name: 'Name',
              value: 'Value'
            }
          });
        };
        return expect(render(template)).to.equal('<br data-name="Name" data-value="Value" />');
      });
    });
  });

}).call(this);
