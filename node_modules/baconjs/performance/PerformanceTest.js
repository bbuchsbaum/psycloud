// Generated by CoffeeScript 1.6.3
(function() {
  var Bacon, Benchmark, f, suite, _;

  Benchmark = require('benchmark');

  Bacon = (require("../src/Bacon")).Bacon;

  _ = Bacon._;

  f = {
    generator: function() {
      var streams;
      streams = [];
      return {
        stream: function() {
          var bus, counter;
          counter = 0;
          bus = new Bacon.Bus();
          bus.tick = function() {
            return this.push(counter = counter + 1);
          };
          streams.push(bus);
          return bus;
        },
        tick: function() {
          var s, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = streams.length; _i < _len; _i++) {
            s = streams[_i];
            _results.push(s.tick());
          }
          return _results;
        },
        ticks: function(count) {
          var i, _i, _results;
          _results = [];
          for (i = _i = 1; 1 <= count ? _i <= count : _i >= count; i = 1 <= count ? ++_i : --_i) {
            _results.push(this.tick());
          }
          return _results;
        }
      };
    },
    everyNth: function(n, stream) {
      return stream.filter(function(x) {
        return x % n === 0;
      });
    },
    withGenerator: function(fun, rounds) {
      var gen;
      if (rounds == null) {
        rounds = 100;
      }
      gen = f.generator();
      fun(gen).onValue(function(v) {});
      return gen.ticks(rounds);
    },
    combineTemplate: function(gen, width, depth) {
      var i, template, _i;
      if (depth === 0) {
        return gen.stream();
      } else {
        template = {};
        for (i = _i = 1; 1 <= width ? _i <= width : _i >= width; i = 1 <= width ? ++_i : --_i) {
          template[i] = f.combineTemplate(gen, width, depth - 1);
        }
        return Bacon.combineTemplate(template);
      }
    },
    zip: function(gen) {
      return gen.stream().zip(gen.stream());
    }
  };

  suite = new Benchmark.Suite;

  suite.add('combo', function() {
    return f.withGenerator((function(gen) {
      var s;
      s = f.combineTemplate(gen, 2, 2);
      s.onValue(function() {
        return f.combineTemplate(gen, 2, 4).onValue(function() {});
      });
      return s;
    }), 1);
  });

  suite.add('zip', function() {
    return f.withGenerator(function(gen) {
      return f.zip(gen);
    });
  });

  suite.add('Bacon.combineTemplate.sample', function() {
    return f.withGenerator(function(gen) {
      return f.combineTemplate(gen, 5, 1).sampledBy(f.everyNth(10, gen.stream()));
    });
  });

  suite.add('Bacon.combineTemplate (deep)', function() {
    return f.withGenerator(function(gen) {
      return f.combineTemplate(gen, 3, 3);
    });
  });

  suite.add('Bacon.combineTemplate', function() {
    return f.withGenerator(function(gen) {
      return f.combineTemplate(gen, 5, 1);
    });
  });

  suite.add('EventStream.map', function() {
    return f.withGenerator(function(gen) {
      return gen.stream().map(function(x) {
        return x * 2;
      });
    });
  });

  suite.add('EventStream.scan', function() {
    return f.withGenerator(function(gen) {
      return gen.stream().scan(0, function(x, y) {
        return x + y;
      });
    });
  });

  suite.add('EventStream.toProperty', function() {
    return f.withGenerator(function(gen) {
      return gen.stream().toProperty();
    });
  });

  suite.on('cycle', function(event) {
    return console.log(String(event.target));
  }).on("error", function(error) {
    return console.log(error);
  }).run({
    'async': false
  });

}).call(this);
