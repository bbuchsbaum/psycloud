// Generated by CoffeeScript 1.6.3
(function() {
  var Bacon, calls, expect, fail, nop, promise, success, _;

  expect = require("chai").expect;

  Bacon = (require("../src/Bacon")).Bacon;

  success = void 0;

  fail = void 0;

  calls = 0;

  promise = {
    then: function(s, f) {
      success = s;
      fail = f;
      return calls = calls + 1;
    }
  };

  _ = Bacon._;

  nop = function() {};

  describe("Bacon.fromPromise", function() {
    it("should produce value and end on success", function() {
      var events,
        _this = this;
      events = [];
      Bacon.fromPromise(promise).subscribe(function(e) {
        return events.push(e);
      });
      success("a");
      return expect(_.map((function(e) {
        return e.toString();
      }), events)).to.deep.equal(["a", "<end>"]);
    });
    it("should produce error and end on error", function() {
      var events,
        _this = this;
      events = [];
      Bacon.fromPromise(promise).subscribe(function(e) {
        return events.push(e);
      });
      fail("a");
      return expect(events.map(function(e) {
        return e.toString();
      })).to.deep.equal(["<error> a", "<end>"]);
    });
    it("should respect unsubscription", function() {
      var dispose, events,
        _this = this;
      events = [];
      dispose = Bacon.fromPromise(promise).subscribe(function(e) {
        return events.push(e);
      });
      dispose();
      success("a");
      return expect(events).to.deep.equal([]);
    });
    it("should abort ajax promise on unsub, if abort flag is set", function() {
      var dispose, isAborted;
      isAborted = false;
      promise.abort = function() {
        return isAborted = true;
      };
      dispose = Bacon.fromPromise(promise, true).subscribe(nop);
      dispose();
      delete promise.abort;
      return expect(isAborted).to.deep.equal(true);
    });
    it("should not abort ajax promise on unsub, if abort flag is not set", function() {
      var dispose, isAborted;
      isAborted = false;
      promise.abort = function() {
        return isAborted = true;
      };
      dispose = Bacon.fromPromise(promise).subscribe(nop);
      dispose();
      delete promise.abort;
      return expect(isAborted).to.deep.equal(false);
    });
    return it("should not abort non-ajax promise", function() {
      var dispose, isAborted;
      isAborted = false;
      dispose = Bacon.fromPromise(promise).subscribe(nop);
      dispose();
      return expect(isAborted).to.deep.equal(false);
    });
  });

}).call(this);
