// Generated by CoffeeScript 1.7.1
(function() {
  var factorSet, fnode, pres, _;

  this.context = new Psy.createContext();

  _ = Psy._;

  factorSet = {
    trial: [1, 2, 3]
  };

  console.log("building factorSet");

  fnode = Psy.FactorSetNode.build(factorSet);

  console.log("constructing trial list");

  this.trials = fnode.trialList(1, 1);

  window.display = {
    Display: {
      Prelude: {
        Events: {
          1: {
            Markdown: "\nTrails\n==========================\n\nThis a trail-making task.\n\nOn every trial a number of cirlces will appear on the screen.\nEach circle will have a number inside it. Your goal is to make a trail linking all the numbered circles.\nThe path you make should be in sequential order: 1, 2, 3 .. all the way to 25.\n\nTo make a path between two circles, simply click the next circle in the path.\nWhen you select the correct circle, it will turn yellow. When you complete the trail, the final circle will turn red.\n\n\nPress any key to continue\n-------------------------\n",
            Next: {
              AnyKey: ""
            }
          }
        }
      },
      Block: {
        Start: function() {
          return {
            Text: {
              position: "center",
              origin: "center",
              content: ["Get Ready!", "Press Space Bar to start"]
            },
            Next: {
              SpaceKey: ""
            }
          };
        }
      },
      Trial: function() {
        return {
          Background: {
            Blank: {
              fill: "gray"
            },
            CanvasBorder: {
              stroke: "black"
            }
          },
          Events: {
            1: {
              TrailsA: {
                npoints: 25
              },
              Next: {
                Receiver: {
                  id: "trail_completed"
                }
              }
            }
          }
        };
      },
      Coda: {
        Events: {
          1: {
            Text: {
              position: "center",
              origin: "center",
              content: "The End",
              fontSize: 200
            },
            Next: {
              Timeout: {
                duration: 5000
              }
            }
          }
        }
      }
    }
  };

  pres = new Psy.Presenter(trials, display.Display, context);

  pres.start();

}).call(this);
