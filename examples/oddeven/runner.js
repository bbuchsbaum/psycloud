// Generated by CoffeeScript 1.6.3
(function() {
  var factorSet, fnode, pres, trials, _,
    _this = this;

  this.context = new Psy.createContext();

  _ = Psy._;

  factorSet = {
    oddeven: {
      levels: ["odd", "even"]
    }
  };

  this.evenSampler = new Psy.ReplacementSampler([2, 4, 6, 8]);

  this.oddSampler = new Psy.ReplacementSampler([3, 5, 7, 9]);

  fnode = Psy.FactorSetNode.build(factorSet);

  this.trials = fnode.trialList(5, 5);

  trials = this.trials.bind((function(record) {
    if (record.oddeven === "odd") {
      return {
        num: oddSampler.take(1)[0]
      };
    } else {
      return {
        num: evenSampler.take(1)[0]
      };
    }
  }));

  trials.shuffle();

  window.display = {
    Display: {
      Prelude: {
        Events: {
          1: {
            Markdown: "\nWelcome to the Experiment!\n==========================\n\nThis a simple task.\n\nOn every trial a number single-digit number will appear on the screen.\n\n  * If the number is even press the 'n' key\n\n  * If the number is odd press the 'm' key\n\n  * If your response is correct, you will will get a \"Correct!\" message, otherwise you will get an \"Incorrect!\" message.\n\nPress any key to continue\n-------------------------\n",
            Next: {
              AnyKey: ""
            }
          }
        }
      },
      Block: {
        Start: function() {
          return {
            Text: {
              position: "center",
              origin: "center",
              content: ["Get Ready for Block " + this.blockNumber + "!", "Press Space Bar to start"]
            },
            Next: {
              SpaceKey: ""
            }
          };
        },
        End: function() {
          console.log("state is ", this.state);
          console.log("context is", this.context);
          return {
            Text: {
              position: "center",
              origin: "center",
              content: ["End of Block " + this.blockNumber, "Press any key to continue"]
            },
            Next: {
              AnyKey: ""
            }
          };
        }
      },
      Trial: function() {
        return {
          Background: {
            CanvasBorder: {
              stroke: "black"
            }
          },
          Events: {
            1: {
              FixationCross: {
                stroke: "green"
              },
              Next: {
                Timeout: {
                  duration: 500
                }
              }
            },
            2: {
              Text: {
                content: this.num,
                position: "center",
                origin: "center",
                fontSize: 175,
                fill: "blue"
              },
              Next: {
                First: {
                  KeyPress: {
                    id: "answer",
                    keys: ['n', 'm'],
                    correct: this.oddeven === "even" ? 'n' : 'm'
                  },
                  Timeout: {
                    duration: 1500
                  }
                }
              }
            }
          },
          Feedback: function() {
            var _ref;
            return {
              Blank: {
                fill: ((_ref = this.answer) != null ? _ref.Accuracy : void 0) ? "green" : "red",
                opacity: .1
              },
              Next: {
                Timeout: {
                  duration: 200
                }
              }
            };
          }
        };
      }
    }
  };

  pres = new Psy.Presenter(trials, display.Display, context);

  pres.start();

}).call(this);
