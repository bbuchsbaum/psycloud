// Generated by CoffeeScript 1.6.3
(function() {
  var factorSet, fnode, pres, _;

  this.context = new Psy.createContext();

  _ = Psy._;

  factorSet = {
    flanker: {
      levels: ["congruent", "incongruent"]
    },
    centerColor: {
      levels: ["red", "green", "blue", "yellow"]
    }
  };

  this.colorSampler = new Psy.ReplacementSampler(["red", "green", "blue", "yellow"]);

  fnode = Psy.FactorSetNode.build(factorSet);

  this.trials = fnode.trialList(5, 5);

  console.log("psy match");

  this.trials = this.trials.bind(function(record) {
    return {
      flankerColor: Psy.match(record.flanker, {
        congruent: record.centerColor,
        incongruent: function() {
          return Psy.match(record.centerColor, {
            red: Psy.oneOf(["blue", "yellow"]),
            green: Psy.oneOf(["blue", "yellow"]),
            blue: Psy.oneOf(["red", "green"]),
            yellow: Psy.oneOf(["red", "green"])
          });
        }
      })
    };
  });

  this.trials.shuffle();

  window.display = {
    Display: {
      Prelude: {
        Events: {
          1: {
            Markdown: "\nWelcome to the Experiment!\n==========================\n\nThis a simple task.\n\nOn every trial a central square will appear surrounded by two flanking squares.\nYour goal is to focus on the central square and make a judgment about its color.\nYou should ignore the color of the flanking squares.\n\n  * If the central square is RED or GREEN, press the 'g' key.\n\n  * If the central square is YELLOW or BLUE press the 'h' key.\n\n  * If your response is correct, the screen will briefly turn green.\n\n  * If your response is incorrect, the screen will brielfy turn red.\n\nPress any key to continue\n-------------------------\n",
            Next: {
              AnyKey: ""
            }
          }
        }
      },
      Block: {
        Start: function() {
          console.log("START BLOCK");
          return {
            Text: {
              position: "center",
              origin: "center",
              content: ["Get Ready for Block " + this.blockNumber + "!", "Press Space Bar to start"]
            },
            Next: {
              SpaceKey: ""
            }
          };
        },
        End: function() {
          console.log("END BLOCK");
          return {
            Text: {
              position: "center",
              origin: "center",
              content: ["End of Block " + this.blockNumber, "Press any key to continue"]
            },
            Next: {
              AnyKey: ""
            }
          };
        }
      },
      Trial: function() {
        var diameter;
        diameter = 190;
        return {
          Background: {
            Blank: {
              fill: "gray"
            },
            CanvasBorder: {
              stroke: "black"
            }
          },
          Events: {
            1: {
              FixationCross: {
                fill: "black"
              },
              Next: {
                Timeout: {
                  duration: 1000
                }
              }
            },
            2: {
              Group: {
                stims: [
                  {
                    Rectangle: {
                      x: this.screen.center.x - 200,
                      y: this.screen.center.y,
                      origin: "center",
                      fill: this.trial.flankerColor,
                      width: diameter,
                      height: diameter
                    }
                  }, {
                    Rectangle: {
                      x: this.screen.center.x,
                      y: this.screen.center.y,
                      origin: "center",
                      fill: this.trial.centerColor,
                      width: diameter,
                      height: diameter
                    }
                  }, {
                    Rectangle: {
                      x: this.screen.center.x + 200,
                      y: this.screen.center.y,
                      origin: "center",
                      fill: this.trial.flankerColor,
                      width: diameter,
                      height: diameter
                    }
                  }
                ]
              },
              Next: {
                First: {
                  KeyPress: {
                    id: "answer",
                    keys: ['g', 'h'],
                    correct: this.trial.centerColor === "red" || this.trial.centerColor === "green" ? 'g' : 'h'
                  },
                  Timeout: {
                    id: "timeout",
                    duration: 1500
                  }
                }
              }
            }
          },
          Feedback: function() {
            var _ref;
            return {
              Text: {
                content: ((_ref = this.answer) != null ? _ref.Accuracy : void 0) ? "C" : "X",
                fontSize: 400,
                position: "center",
                origin: "center"
              },
              Next: {
                Timeout: {
                  duration: 200
                }
              }
            };
          }
        };
      }
    }
  };

  pres = new Psy.Presenter(trials, display.Display, context);

  pres.start();

}).call(this);
