// Generated by CoffeeScript 1.6.3
(function() {
  var GridLines, Kinetic, Stimulus, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Stimulus = require("../../stimresp").Stimulus;

  Kinetic = require("../../lib/kinetic").Kinetic;

  GridLines = (function(_super) {
    __extends(GridLines, _super);

    function GridLines() {
      _ref = GridLines.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    GridLines.prototype.defaults = {
      x: 0,
      y: 0,
      rows: 3,
      cols: 3,
      stroke: "black",
      strokeWidth: 2
    };

    GridLines.prototype.render = function(context, layer) {
      var i, line, x, y, _i, _j, _ref1, _ref2, _results;
      for (i = _i = 0, _ref1 = this.spec.rows; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        y = this.spec.y + (i * context.height() / this.spec.rows);
        line = new Kinetic.Line({
          points: [this.spec.x, y, this.spec.x + context.width(), y],
          stroke: this.spec.stroke,
          strokeWidth: this.spec.strokeWidth,
          dashArray: this.spec.dashArray
        });
        layer.add(line);
      }
      _results = [];
      for (i = _j = 0, _ref2 = this.spec.cols; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
        x = this.spec.x + (i * context.width() / this.spec.cols);
        line = new Kinetic.Line({
          points: [x, this.spec.y, x, this.spec.y + context.height()],
          stroke: this.spec.stroke,
          strokeWidth: this.spec.strokeWidth,
          dashArray: this.spec.dashArray
        });
        _results.push(layer.add(line));
      }
      return _results;
    };

    return GridLines;

  })(Stimulus);

  exports.GridLines = GridLines;

}).call(this);
